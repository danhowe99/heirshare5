// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.howed.heirshare5.domain;

import com.howed.heirshare5.domain.Estate;
import com.howed.heirshare5.domain.EstateDataOnDemand;
import com.howed.heirshare5.domain.InventoryItem;
import com.howed.heirshare5.domain.InventoryItemDataOnDemand;
import com.howed.heirshare5.repository.InventoryItemRepository;
import com.howed.heirshare5.service.InventoryItemService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect InventoryItemDataOnDemand_Roo_DataOnDemand {
    
    declare @type: InventoryItemDataOnDemand: @Component;
    
    private Random InventoryItemDataOnDemand.rnd = new SecureRandom();
    
    private List<InventoryItem> InventoryItemDataOnDemand.data;
    
    @Autowired
    EstateDataOnDemand InventoryItemDataOnDemand.estateDataOnDemand;
    
    @Autowired
    InventoryItemService InventoryItemDataOnDemand.inventoryItemService;
    
    @Autowired
    InventoryItemRepository InventoryItemDataOnDemand.inventoryItemRepository;
    
    public InventoryItem InventoryItemDataOnDemand.getNewTransientInventoryItem(int index) {
        InventoryItem obj = new InventoryItem();
        setDescription(obj, index);
        setEstate(obj, index);
        setItemValue(obj, index);
        setName(obj, index);
        return obj;
    }
    
    public void InventoryItemDataOnDemand.setDescription(InventoryItem obj, int index) {
        String description = "description_" + index;
        if (description.length() > 100) {
            description = description.substring(0, 100);
        }
        obj.setDescription(description);
    }
    
    public void InventoryItemDataOnDemand.setEstate(InventoryItem obj, int index) {
        Estate estate = estateDataOnDemand.getRandomEstate();
        obj.setEstate(estate);
    }
    
    public void InventoryItemDataOnDemand.setItemValue(InventoryItem obj, int index) {
        Integer itemValue = new Integer(index);
        obj.setItemValue(itemValue);
    }
    
    public void InventoryItemDataOnDemand.setName(InventoryItem obj, int index) {
        String name = "name_" + index;
        if (name.length() > 30) {
            name = new Random().nextInt(10) + name.substring(1, 30);
        }
        obj.setName(name);
    }
    
    public InventoryItem InventoryItemDataOnDemand.getSpecificInventoryItem(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        InventoryItem obj = data.get(index);
        Long id = obj.getId();
        return inventoryItemService.findInventoryItem(id);
    }
    
    public InventoryItem InventoryItemDataOnDemand.getRandomInventoryItem() {
        init();
        InventoryItem obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return inventoryItemService.findInventoryItem(id);
    }
    
    public boolean InventoryItemDataOnDemand.modifyInventoryItem(InventoryItem obj) {
        return false;
    }
    
    public void InventoryItemDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = inventoryItemService.findInventoryItemEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'InventoryItem' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<InventoryItem>();
        for (int i = 0; i < 10; i++) {
            InventoryItem obj = getNewTransientInventoryItem(i);
            try {
                inventoryItemService.saveInventoryItem(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            inventoryItemRepository.flush();
            data.add(obj);
        }
    }
    
}
