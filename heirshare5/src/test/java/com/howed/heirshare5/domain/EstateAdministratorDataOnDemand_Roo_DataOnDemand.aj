// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.howed.heirshare5.domain;

import com.howed.heirshare5.domain.EstateAdministrator;
import com.howed.heirshare5.domain.EstateAdministratorDataOnDemand;
import com.howed.heirshare5.repository.EstateAdministratorRepository;
import com.howed.heirshare5.service.EstateAdministratorService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect EstateAdministratorDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EstateAdministratorDataOnDemand: @Component;
    
    private Random EstateAdministratorDataOnDemand.rnd = new SecureRandom();
    
    private List<EstateAdministrator> EstateAdministratorDataOnDemand.data;
    
    @Autowired
    EstateAdministratorService EstateAdministratorDataOnDemand.estateAdministratorService;
    
    @Autowired
    EstateAdministratorRepository EstateAdministratorDataOnDemand.estateAdministratorRepository;
    
    public EstateAdministrator EstateAdministratorDataOnDemand.getNewTransientEstateAdministrator(int index) {
        EstateAdministrator obj = new EstateAdministrator();
        setEmail(obj, index);
        setPassword(obj, index);
        return obj;
    }
    
    public void EstateAdministratorDataOnDemand.setEmail(EstateAdministrator obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 30) {
            email = new Random().nextInt(10) + email.substring(1, 30);
        }
        obj.setEmail(email);
    }
    
    public void EstateAdministratorDataOnDemand.setPassword(EstateAdministrator obj, int index) {
        String password = "password_" + index;
        if (password.length() > 10) {
            password = password.substring(0, 10);
        }
        obj.setPassword(password);
    }
    
    public EstateAdministrator EstateAdministratorDataOnDemand.getSpecificEstateAdministrator(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        EstateAdministrator obj = data.get(index);
        Long id = obj.getId();
        return estateAdministratorService.findEstateAdministrator(id);
    }
    
    public EstateAdministrator EstateAdministratorDataOnDemand.getRandomEstateAdministrator() {
        init();
        EstateAdministrator obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return estateAdministratorService.findEstateAdministrator(id);
    }
    
    public boolean EstateAdministratorDataOnDemand.modifyEstateAdministrator(EstateAdministrator obj) {
        return false;
    }
    
    public void EstateAdministratorDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = estateAdministratorService.findEstateAdministratorEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'EstateAdministrator' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<EstateAdministrator>();
        for (int i = 0; i < 10; i++) {
            EstateAdministrator obj = getNewTransientEstateAdministrator(i);
            try {
                estateAdministratorService.saveEstateAdministrator(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            estateAdministratorRepository.flush();
            data.add(obj);
        }
    }
    
}
