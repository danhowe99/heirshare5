// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.howed.heirshare5.domain;

import com.howed.heirshare5.domain.Beneficiary;
import com.howed.heirshare5.domain.BeneficiaryDataOnDemand;
import com.howed.heirshare5.domain.BeneficiaryItemChoice;
import com.howed.heirshare5.domain.BeneficiaryItemChoiceDataOnDemand;
import com.howed.heirshare5.domain.InventoryItem;
import com.howed.heirshare5.domain.InventoryItemDataOnDemand;
import com.howed.heirshare5.repository.BeneficiaryItemChoiceRepository;
import com.howed.heirshare5.service.BeneficiaryItemChoiceService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect BeneficiaryItemChoiceDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BeneficiaryItemChoiceDataOnDemand: @Component;
    
    private Random BeneficiaryItemChoiceDataOnDemand.rnd = new SecureRandom();
    
    private List<BeneficiaryItemChoice> BeneficiaryItemChoiceDataOnDemand.data;
    
    @Autowired
    BeneficiaryDataOnDemand BeneficiaryItemChoiceDataOnDemand.beneficiaryDataOnDemand;
    
    @Autowired
    InventoryItemDataOnDemand BeneficiaryItemChoiceDataOnDemand.inventoryItemDataOnDemand;
    
    @Autowired
    BeneficiaryItemChoiceService BeneficiaryItemChoiceDataOnDemand.beneficiaryItemChoiceService;
    
    @Autowired
    BeneficiaryItemChoiceRepository BeneficiaryItemChoiceDataOnDemand.beneficiaryItemChoiceRepository;
    
    public BeneficiaryItemChoice BeneficiaryItemChoiceDataOnDemand.getNewTransientBeneficiaryItemChoice(int index) {
        BeneficiaryItemChoice obj = new BeneficiaryItemChoice();
        setBeneficiary(obj, index);
        setChoicePriority(obj, index);
        setInventoryItem(obj, index);
        return obj;
    }
    
    public void BeneficiaryItemChoiceDataOnDemand.setBeneficiary(BeneficiaryItemChoice obj, int index) {
        Beneficiary beneficiary = beneficiaryDataOnDemand.getRandomBeneficiary();
        obj.setBeneficiary(beneficiary);
    }
    
    public void BeneficiaryItemChoiceDataOnDemand.setChoicePriority(BeneficiaryItemChoice obj, int index) {
        Short choicePriority = new Integer(index).shortValue();
        obj.setChoicePriority(choicePriority);
    }
    
    public void BeneficiaryItemChoiceDataOnDemand.setInventoryItem(BeneficiaryItemChoice obj, int index) {
        InventoryItem inventoryItem = inventoryItemDataOnDemand.getRandomInventoryItem();
        obj.setInventoryItem(inventoryItem);
    }
    
    public BeneficiaryItemChoice BeneficiaryItemChoiceDataOnDemand.getSpecificBeneficiaryItemChoice(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        BeneficiaryItemChoice obj = data.get(index);
        Long id = obj.getId();
        return beneficiaryItemChoiceService.findBeneficiaryItemChoice(id);
    }
    
    public BeneficiaryItemChoice BeneficiaryItemChoiceDataOnDemand.getRandomBeneficiaryItemChoice() {
        init();
        BeneficiaryItemChoice obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return beneficiaryItemChoiceService.findBeneficiaryItemChoice(id);
    }
    
    public boolean BeneficiaryItemChoiceDataOnDemand.modifyBeneficiaryItemChoice(BeneficiaryItemChoice obj) {
        return false;
    }
    
    public void BeneficiaryItemChoiceDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = beneficiaryItemChoiceService.findBeneficiaryItemChoiceEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'BeneficiaryItemChoice' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<BeneficiaryItemChoice>();
        for (int i = 0; i < 10; i++) {
            BeneficiaryItemChoice obj = getNewTransientBeneficiaryItemChoice(i);
            try {
                beneficiaryItemChoiceService.saveBeneficiaryItemChoice(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            beneficiaryItemChoiceRepository.flush();
            data.add(obj);
        }
    }
    
}
